# -*- coding: utf-8 -*-
"""House Price Prediction

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HuA0MdAIEMSY_ipBMQaywiSvQncW6rd9
"""

from google.colab import drive
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import os
drive.mount('/content/gdrive')

#located working directory
file_path = '/content/gdrive/My Drive/python ML/4433data'
os.chdir(file_path)

test = pd.read_csv('test.csv')
train = pd.read_csv('train.csv')

test.head()

#print the  number of null value
print("the number of null in each row")
for i in range(1,81):
  if train.iloc[:,i].isnull().sum() != 0:
    print(i,train.columns.values.tolist()[i],":",train.iloc[:,i].isnull().sum())

#remove Alley, PoolQC, Fence, MiscFeature for train and test
train_df=train.drop(["Id","Alley","PoolQC","Fence","MiscFeature"],axis=1)
test_df=test.drop(["Alley","PoolQC","Fence","MiscFeature"],axis=1)

#train data preprocess for numeric one
train_df["LotFrontage"] = train_df["LotFrontage"].fillna(train_df["LotFrontage"].mean())
train_df["MasVnrArea"] = train_df["MasVnrArea"].fillna(train_df["MasVnrArea"].mean())
train_df["GarageYrBlt"] = train_df["GarageYrBlt"].fillna(2001)

#train data preprocess for catgorical one
c = ("GarageType", "GarageFinish", "GarageQual", "GarageCond", "BsmtFinType2", "BsmtCond", "BsmtQual", "BsmtExposure", "MasVnrType", "Electrical", "FireplaceQu", "BsmtFinType1")
for col in c:
  if train_df[col].dtype == "object":
    train_df[col] = train_df[col].fillna("None")

#train data preprocess for numeric one
test_df["LotFrontage"] = test_df["LotFrontage"].fillna(test_df["LotFrontage"].mean())#LotFrontage: Linear feet of street connected to property
test_df["MasVnrArea"] = test_df["MasVnrArea"].fillna(test_df["MasVnrArea"].mean())#Masonry veneer area in square feet
test_df["GarageYrBlt"] = test_df["GarageYrBlt"].fillna(2001)#GarageYrBlt: Year garage was built
test_df["GarageCars"] = test_df["GarageCars"].fillna(0)#GarageCars: Size of garage in car capacity
test_df["GarageArea"] = test_df["GarageArea"].fillna(test_df["GarageArea"].mean())#GarageArea: Size of garage in square feet
test_df["BsmtFullBath"] = test_df["BsmtFullBath"].fillna(0)#BsmtFullBath: Basement full bathrooms
test_df["BsmtHalfBath"] = test_df["BsmtHalfBath"].fillna(0)#BsmtHalfBath: Basement half bathrooms
test_df["BsmtFinSF1"] = test_df["BsmtFinSF1"].fillna(test_df["BsmtFinSF1"].mean())#BsmtFinSF1: Type 1 finished square feet
test_df["BsmtFinSF2"] = test_df["BsmtFinSF2"].fillna(test_df["BsmtFinSF2"].mean())#BsmtFinSF2: Type 2 finished square feet
test_df["TotalBsmtSF"] = test_df["TotalBsmtSF"].fillna(test_df["TotalBsmtSF"].mean())#TotalBsmtSF: Total square feet of basement area
test_df["BsmtUnfSF"] = test_df["BsmtUnfSF"].fillna(test_df["BsmtUnfSF"].mean())#BsmtUnfSF: Unfinished square feet of basement area

#test data preprocess for catgorical one
c = ("GarageType", "GarageFinish", "GarageQual", "GarageCond", "BsmtFinType2", "BsmtCond", "BsmtQual", "BsmtExposure", "MasVnrType", "Electrical","MSZoning","Utilities","Exterior1st","Exterior2nd","KitchenQual","Functional","FireplaceQu","SaleType", "BsmtFinType1")
for col in c:
  if test_df[col].dtype == "object":
    test_df[col] = test_df[col].fillna("None")

train_df.info()

from sklearn.preprocessing import LabelEncoder
catagory_cols = ('MSZoning','Street','LotShape','LandContour','Utilities','LotConfig','LandSlope','Neighborhood','Condition1','Condition2','BldgType', 'HouseStyle', 'RoofStyle','RoofMatl','Exterior1st','Exterior2nd','ExterCond','Foundation','Heating','HeatingQC','CentralAir','KitchenQual','Functional','FireplaceQu','PavedDrive','SaleType','SaleCondition', "GarageType", "GarageFinish", "GarageQual", "GarageCond", "BsmtFinType2", "BsmtCond", "BsmtQual", "BsmtExposure", "MasVnrType", "Electrical", "BsmtFinType1", "ExterQual")
for c in catagory_cols:
  le = LabelEncoder()
  train_df[c]= le.fit_transform(train_df[c].values)
  test_df[c]= le.fit_transform(test_df[c].values)

#split X and Y
X_train = train_df.drop("SalePrice", axis=1)
Y_train = train_df["SalePrice"]
X_test  = test_df.drop("Id", axis=1).copy()

#feature scaling
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

# Principle Component Analysis (PCA)
from sklearn.decomposition import PCA
pca = PCA(n_components = 10)
X_train = pca.fit_transform(X_train)
X_test = pca.transform(X_test)

from sklearn.ensemble import RandomForestRegressor
regressor = RandomForestRegressor(n_estimators = 200, random_state = 0)
regressor.fit(X_train, Y_train)
Y_pred = regressor.predict(X_test)

submission = pd.DataFrame({
        "Id": test_df["Id"],
        "SalePrice": Y_pred
    })
submission.to_csv('RandomForest.csv', index=False)

X_train

X_tra.head()

lambda x: '{:.3f}'.format(x)

a=-1
for j  in [9,23,24,34,36,37,38,47,48,53,55,61,62,78]:
  a=-1
  for i in test.iloc[:,j].isnull():
    a = a+1
    if i:
      print(a)

test.iloc[0,].isnull().sum()

print("the number of null in each row")
for i in range(1,80):
  if test.iloc[:,i].isnull().sum() != 0:
    print(i,test.columns.values.tolist()[i],":",test.iloc[:,i].isnull().sum())

train["Id"].isna().sum()

train['SalePrice'].plot(kind='hist')

train['SalePrice'].describe()

train.describe()

sns.distplot(train['SalePrice'])

plt.rcParams['figure.figsize']=35,35
g = sns.heatmap(train.corr(),annot=True, fmt = ".1f")

sns.barplot(x='YearBuilt', y='SalePrice', data=train)

sns.barplot(x='SaleCondition', y='SalePrice', data=train)

sns.barplot(x='YrSold', y='SalePrice', data=train)

